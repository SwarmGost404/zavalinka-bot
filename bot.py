import logging
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    CallbackQueryHandler
)
from env import API_TOKEN
from database import (
    init_db, get_db, add_song, get_all_songs,
    get_songs_by_region, search_by_title,
    search_by_text, get_song_by_id
)

# Initialize logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Initialize database
init_db()

def parse_region(region_str):
    """Parse region string into category and place"""
    if not region_str:
        return "", ""
    
    if '|' in region_str:
        parts = region_str.split('|')
        category = parts[0]
        place = parts[1] if len(parts) > 1 else ""
        if place.strip() in ("", "."):
            return category, ""
        return category, place
    return region_str, ""

# Menu functions
async def show_main_menu(update: Update, context: CallbackContext):
    help_text = (
        "üéµ *–≠—Ç–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∞—Ä—Ö–∏–≤ –ø–µ—Å–µ–Ω*\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–µ—Å–Ω—é –≤ –∞—Ä—Ö–∏–≤\n"
        "/search_title - –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–µ—Å–Ω–∏\n"
        "/search_text - –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –ø–µ—Å–Ω–∏\n"
        "/search_place - –ü–æ–∏—Å–∫ –ø–æ –º–µ—Å—Ç—É –∑–∞–ø–∏—Å–∏\n"
        "/search_category - –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
        "/all - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–µ—Å–µ–Ω\n"
        "/help - –ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n"
    )
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def help_command(update: Update, context: CallbackContext) -> None:
    help_text = (
        "üéµ *–≠—Ç–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∞—Ä—Ö–∏–≤ –ø–µ—Å–µ–Ω*\n\n"
        "–Ø (–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞) —Ö–æ—á—É —Ä–∞–∑–≤–∏–≤–∞—Ç—å —É–¥–æ–±—Å—Ç–≤–æ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Ä–æ–¥–Ω—ã—Ö –ø–µ—Å–µ–Ω. "
        "–Ø —Å–¥–µ–ª–∞–ª —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –Ω–∞ —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏ –∏ —Å–≤–æ–∏–º–∏ —Ä—É–∫–∞–º–∏. –°–≤—è–∑—å —Å–æ –º–Ω–æ–π @SwarmGost\n\n"
        "*–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã:*\n\n"
        "‚Ä¢ /add - –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –∞—Ä—Ö–∏–≤\n"
        "‚Ä¢ /search_title - –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "‚Ä¢ /search_text - –Ω–∞–π—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É –ø–µ—Å–Ω–∏\n"
        "‚Ä¢ /search_place - –Ω–∞–π—Ç–∏ –ø–æ –º–µ—Å—Ç—É –∑–∞–ø–∏—Å–∏\n"
        "‚Ä¢ /all - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ–≥–æ –∞—Ä—Ö–∏–≤–∞\n"
        "‚Ä¢ /search_category - –Ω–∞–π—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n\n"
        "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
    )
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def add_song_handler(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏:')
    context.user_data['awaiting_input'] = 'awaiting_title'

async def search_title_handler(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:')
    context.user_data['awaiting_input'] = 'search_title'

async def search_text_handler(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:')
    context.user_data['awaiting_input'] = 'search_text'

async def search_place_handler(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:')
    context.user_data['awaiting_input'] = 'search_place'

async def list_songs_handler(update: Update, context: CallbackContext) -> None:
    db = next(get_db())
    try:
        results = get_all_songs(db)
        await display_results(update, results, "–≤—Å–µ –ø–µ—Å–Ω–∏", context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–µ—Å–µ–Ω: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await show_main_menu(update, context)
    finally:
        db.close()

async def list_by_region_handler(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:')
    context.user_data['awaiting_input'] = 'awaiting_region'

async def display_results(update: Update, results, search_description, context: CallbackContext):
    if results:
        keyboard = []
        for song in results:
            category, place = parse_region(song.region)
            button_text = f"{song.title}"
            if place:
                button_text += f" ({place})"
            
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"song_{song.id}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"üîç *–ù–∞–π–¥–µ–Ω—ã –ø–µ—Å–Ω–∏ {search_description}:*",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É {search_description} –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    await show_main_menu(update, context)

async def handle_message(update: Update, context: CallbackContext) -> None:
    if 'awaiting_input' not in context.user_data:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º. /help - –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
        return

    user_input = update.message.text

    try:
        if context.user_data['awaiting_input'] == 'awaiting_title':
            context.user_data['title'] = user_input
            await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:')
            context.user_data['awaiting_input'] = 'awaiting_region'

        elif context.user_data['awaiting_input'] == 'awaiting_region':
            context.user_data['region'] = user_input
            await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –∑–∞–ø–∏—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–°–µ–ª–æ –í—è—Ç—Å–∫–æ–µ –Ø—Ä–æ—Å–ª–∞–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏"), –∏–ª–∏ —Ç–æ—á–∫—É (.), –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ:')
            context.user_data['awaiting_input'] = 'awaiting_place'

        elif context.user_data['awaiting_input'] == 'awaiting_place':
            if user_input.strip() in ("", "."):
                context.user_data['place'] = ""
            else:
                context.user_data['place'] = user_input
            await update.message.reply_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏:')
            context.user_data['awaiting_input'] = 'awaiting_text'

        elif context.user_data['awaiting_input'] == 'awaiting_text':
            context.user_data['text'] = user_input
            await save_song(update, context)

        elif context.user_data['awaiting_input'] == 'search_title':
            db = next(get_db())
            results = search_by_title(db, user_input)
            await display_results(update, results, f"–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é '{user_input}'", context)

        elif context.user_data['awaiting_input'] == 'search_text':
            db = next(get_db())
            results = search_by_text(db, user_input)
            await display_results(update, results, f"–ø–æ —Ç–µ–∫—Å—Ç—É '{user_input}'", context)

        elif context.user_data['awaiting_input'] == 'search_place':
            db = next(get_db())
            results = [song for song in get_all_songs(db) 
                      if '|' in song.region and user_input.lower() in song.region.lower().split('|')[1]]
            await display_results(update, results, f"–ø–æ –º–µ—Å—Ç—É –∑–∞–ø–∏—Å–∏ '{user_input}'", context)

        elif context.user_data['awaiting_input'] == 'awaiting_region':
            db = next(get_db())
            results = get_songs_by_region(db, user_input)
            await display_results(update, results, f"–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{user_input}'", context)

    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await show_main_menu(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await show_main_menu(update, context)
    finally:
        if context.user_data['awaiting_input'] not in ['awaiting_title', 'awaiting_region', 'awaiting_place', 'awaiting_text']:
            context.user_data.clear()

async def save_song(update: Update, context: CallbackContext) -> None:
    db = next(get_db())
    try:
        title = context.user_data['title']
        region = context.user_data['region']
        place = context.user_data.get('place', '')
        text = context.user_data.get('text', '')
        
        if place.strip() in ("", "."):
            full_region = region
        else:
            full_region = f"{region}|{place}"
        
        song = add_song(db, title=title, region=full_region, text=text)
        
        response_message = (
            f'üéµ *–ü–µ—Å–Ω—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!*\n\n'
            f'*–ù–∞–∑–≤–∞–Ω–∏–µ:* {title}\n'
            f'*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {region}\n'
        )
        if place:
            response_message += f'*–ú–µ—Å—Ç–æ –∑–∞–ø–∏—Å–∏:* {place}\n'
        
        response_message += '\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã (/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥)'
        
        await update.message.reply_text(response_message, parse_mode='Markdown')
        context.user_data.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()
        await show_main_menu(update, context)

async def button_callback(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    song_id = int(query.data.split("_")[1])
    db = next(get_db())
    
    try:
        song = get_song_by_id(db, song_id)
        if song:
            category, place = parse_region(song.region)
            response_text = (
                f"üéµ *–î–µ—Ç–∞–ª–∏ –ø–µ—Å–Ω–∏*\n\n"
                f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {song.title}\n"
                f"*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n"
            )
            if place:
                response_text += f"*–ú–µ—Å—Ç–æ –∑–∞–ø–∏—Å–∏:* {place}\n\n"
            
            response_text += f"*–¢–µ–∫—Å—Ç:*\n{song.text}\n\n"
            response_text += "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã (/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥)"
            
            await query.edit_message_text(
                response_text,
                parse_mode='Markdown'
            )
        else:
            await query.edit_message_text("‚ùå –ü–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()

def main():
    application = Application.builder().token(API_TOKEN).build()

    # Register command handlers
    application.add_handler(CommandHandler("start", show_main_menu))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("add", add_song_handler))
    application.add_handler(CommandHandler("search_title", search_title_handler))
    application.add_handler(CommandHandler("search_text", search_text_handler))
    application.add_handler(CommandHandler("search_place", search_place_handler))
    application.add_handler(CommandHandler("search_category", list_by_region_handler))
    application.add_handler(CommandHandler("all", list_songs_handler))

    # Register other message handlers
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Register callback handler
    application.add_handler(CallbackQueryHandler(button_callback))

    # Run the bot
    application.run_polling()

if __name__ == '__main__':
    main()